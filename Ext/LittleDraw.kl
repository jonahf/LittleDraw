require Math;
require Geometry;

/// \dfgPresetOmit
const UInt8 LD_MODE_NONE = 255;

/// \dfgPresetOmit
interface LDJobInterface {
  createLines(io Ref<Lines> lines, io Ref<ColorAttribute> vc);
  createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> sizes);
};



/// \internal
inline Boolean LittleDraw_GetModeBit(UInt8 bitmask, UInt8 bit) {
  return bitmask & (1 << bit);
}
/// \internal
inline LittleDraw_SetModeBit(io UInt8 bitmask, UInt8 bit, Boolean value) {
  bitmask = bitmask & ~(1 << bit);
  if (value)
    bitmask = bitmask | (1 << bit);
}


/// \dfgPresetOmit
object LittleDraw : LDJobInterface {
  Vec3 ctx;
  LittleDraw other;
};

/// \internal
inline LittleDraw.createLines(io Ref<Lines> lines, io Ref<ColorAttribute> vc) {}
/// \internal
inline LittleDraw.createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> sizes) {}


inline LittleDraw.setContextPosition!(Vec3 pos) {
  if (this != null)
    this.ctx = pos;
}


//
// LittleDrawVector type
//

/// \dfgPresetOmit
const UInt8 LD_MODE_V_VECTOR = 0;
/// \dfgPresetOmit
const UInt8 LD_MODE_V_POSTRAIL = 1;
/// \dfgPresetOmit
const UInt8 LD_MODE_V_POSDOT = 2;

object LittleDrawVector : LittleDraw {
  Vec3 payload;
  Color color;
  UInt8 mode;
  UInt8 pointSize;
};

/// \dfgPresetTitle LittleDrawVector
/// \dfgPresetCombo mode ("Vector", "Vector Normalized")
/// \dfgPresetDefault mode 0
/// \dfgPresetDefault scale 1
/// \dfgPresetDefault color {'r':1.0, 'g':1.0, 'b':1.0, 'a':1.0}
function LittleDrawVector(UInt8 mode, Vec3 payload, Scalar scale, Color color, LittleDraw other) {
  this.payload = payload;
  this.color = color;
  this.other = other;
  switch (mode) {
    case 0:
      this.mode = LD_MODE_V_VECTOR;
      break;
    case 1:
      this.mode = LD_MODE_V_VECTOR;
      if (!Math_badDivisor(payload.x) || !Math_badDivisor(payload.z) || !Math_badDivisor(payload.y))
        this.payload = this.payload.unit();
      break;
    default:
      this.mode = LD_MODE_NONE;
      break;
  }
  this.payload *= scale;
}

/// \dfgPresetCreate
/// \dfgPresetTitle LittleDrawPoint
/// \dfgPresetCombo mode ("Position", "Position Trail")
/// \dfgPresetDefault mode 0
/// \dfgPresetDefault pointSize 6
/// \dfgPresetDefault color {'r':1.0, 'g':1.0, 'b':1.0, 'a':1.0}
function LittleDrawVector(UInt8 mode, Vec3 payload, Color color, UInt8 pointSize, LittleDraw other) {
  this.payload = payload;
  this.color = color;
  this.pointSize = pointSize;
  switch (mode) {
    case 0:
      this.mode = LD_MODE_V_POSDOT;
      break;
    case 1:
      this.mode = LD_MODE_V_POSTRAIL;
      break;
    default:
      this.mode = LD_MODE_NONE;
      break;
  }
}

/// \dfgPresetOmit
inline LittleDrawVector.createLines(io Ref<Lines> lines, io Ref<ColorAttribute> vc) {
  switch (this.mode) {
    case LD_MODE_V_VECTOR:
      LittleDraw_AddColoredLine(this.ctx, this.ctx + this.payload, 
                                this.color*0.25, this.color, 
                                lines, vc);
      break;
    case LD_MODE_V_POSTRAIL:
      LittleDraw_AddColoredLine(this.ctx, this.payload, 
                                this.color*0.5, this.color*0.75, 
                                lines, vc);
      break;
  }
}

/// \dfgPresetOmit
inline LittleDrawVector.createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> psizes) {
  switch (this.mode) {
    case LD_MODE_V_POSTRAIL:
    case LD_MODE_V_POSDOT:
      LittleDraw_AddColoredPoint(this.payload, this.pointSize, this.color, points, vc, psizes);
      break;
  }
}



//
// LittleDrawColor type
//


object LittleDrawColor : LittleDraw {
  Color payload;
  UInt8 pointSize;
};

/// \dfgPresetDefault payload {'r':0.9, 'g':0.25, 'b':0.25, 'a':1.0}
/// \dfgPresetDefault pointSize 10
function LittleDrawColor(Color payload, UInt8 pointSize, LittleDraw other) {
  this.payload = payload;
  this.other = other;
  this.pointSize = pointSize;
}

/// \dfgPresetTitle LittleDrawColorScalar
/// \dfgPresetDefault color {'r':0.9, 'g':0.25, 'b':0.25, 'a':1.0}
/// \dfgPresetDefault intensity 1.0
/// \dfgPresetDefault invertedNegatives true
/// \dfgPresetDefault pointSize 10
function LittleDrawColor(Scalar payload, Scalar intensity, Color color, Boolean invertedNegatives, UInt8 pointSize, LittleDraw other) {
  if (payload < 0 && invertedNegatives) {
    this.payload = (Color(1.0, 1.0, 1.0) - color) * payload * -1.0 * intensity;
  } else {
    this.payload = color * payload * intensity;
  }

  this.pointSize = pointSize;
  this.other = other;
}

/// \dfgPresetTitle LittleDrawColorVector
/// \dfgPresetDefault unit false
/// \dfgPresetDefault intensity 1.0
/// \dfgPresetDefault unit false
/// \dfgPresetDefault normalize false
/// \dfgPresetDefault pointSize 10
function LittleDrawColor(Vec3 payload, Scalar intensity, Boolean unit, Boolean normalize, UInt8 pointSize, LittleDraw other) {
  this.payload = payload.toColor(unit, normalize) * intensity;
  this.other = other;
  this.pointSize = pointSize;
}

/// \dfgPresetOmit
inline LittleDrawColor.createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> psizes) {
  LittleDraw_AddColoredPoint(this.ctx, this.pointSize, this.payload, points, vc, psizes);
}



//
// LittleDrawAxis type
//

/// \dfgPresetOmit
const UInt8 LD_MODE_A_AXIS = 0;
/// \dfgPresetOmit
const UInt8 LD_MODE_A_AXIS_TRAIL = 1;


object LittleDrawAxis : LittleDraw {
  Mat44 payload;
  Color color;
  UInt8 mode; // bit 0: draw
              // bit 1: trail
              // bit 2: local
              // bit 3: crosses
  UInt8 pointSize;
};

/// \dfgPresetTitle LittleDrawAxisMat44
/// \dfgPresetDefault color {'r':0.9, 'g':0.25, 'b':0.25, 'a':1.0}
/// \dfgPresetDefault scale 1.0
/// \dfgPresetCombo mode ("Axes", "Crosses")
/// \dfgPresetDefault pointSize 5;
function LittleDrawAxis(UInt8 mode, Boolean local, Boolean trail, Mat44 payload, Scalar scale, Color color, UInt8 pointSize, LittleDraw other) {
  LittleDraw_SetModeBit(this.mode, 0, true);
  if (trail)
      LittleDraw_SetModeBit(this.mode, 1, true);
  LittleDraw_SetModeBit(this.mode, 2, local);
  LittleDraw_SetModeBit(this.mode, 3, mode == 1);

  Mat44 sclMat = Mat44();
  sclMat.setScaling(scale);
  this.payload = payload * sclMat;  this.color = color;
  this.other = other;
  this.pointSize = pointSize;
}

/// \dfgPresetTitle LittleDrawAxisXfo
/// \dfgPresetDefault color {'r':1.0, 'g':1.0, 'b':1.0, 'a':1.0}
/// \dfgPresetDefault scale 1.0
/// \dfgPresetDefault pointSize 5;
/// \dfgPresetCombo mode ("Axes", "Crosses")
function LittleDrawAxis(UInt8 mode, Boolean local, Boolean trail, Xfo payload, Scalar scale, Color color, UInt8 pointSize, LittleDraw other) {
  LittleDraw_SetModeBit(this.mode, 0, true);
  if (trail)
      LittleDraw_SetModeBit(this.mode, 1, true);
  LittleDraw_SetModeBit(this.mode, 2, local);
  LittleDraw_SetModeBit(this.mode, 3, mode == 1);

  Mat44 sclMat = Mat44();
  sclMat.setScaling(scale);
  this.payload = payload.toMat44() * sclMat;
  this.color = color;
  this.other = other;
  this.pointSize = pointSize;
}


/// \dfgPresetOmit
inline LittleDrawAxis.createLines(io Ref<Lines> lines, io Ref<ColorAttribute> vc) {
  if (!LittleDraw_GetModeBit(this.mode, 0))
    return;
  Boolean local = LittleDraw_GetModeBit(this.mode, 2);
  Boolean crosses = LittleDraw_GetModeBit(this.mode, 3);
  Vec3 o = this.payload.multiplyVector3(Vec3()) + (local ? this.ctx : Vec3());
  Vec3 x = this.payload.multiplyVector3(Vec3(1, 0, 0)) + (local ? this.ctx : Vec3());
  Vec3 y = this.payload.multiplyVector3(Vec3(0, 1, 0)) + (local ? this.ctx : Vec3());
  Vec3 z = this.payload.multiplyVector3(Vec3(0, 0, 1)) + (local ? this.ctx : Vec3());

  if (LittleDraw_GetModeBit(this.mode, 1))
    LittleDraw_AddColoredLine(this.ctx, o, this.color*0.50, this.color*0.75, lines, vc);

  LittleDraw_AddColoredLine((crosses ? o+o-x : o), x, (this.color+Color(1.0, 0.0, 0.0))/2, Color(1.0, 0.0, 0.0), lines, vc);
  LittleDraw_AddColoredLine((crosses ? o+o-y : o), y, (this.color+Color(0.0, 1.0, 0.0))/2, Color(0.0, 1.0, 0.0), lines, vc);
  LittleDraw_AddColoredLine((crosses ? o+o-z : o), z, (this.color+Color(0.25, 0.25, 1.0))/2, Color(0.25, 0.25, 1.0), lines, vc);
}


/// \dfgPresetOmit
inline LittleDrawAxis.createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> psizes) {
  if (!LittleDraw_GetModeBit(this.mode, 0))
    return;

  Boolean local = LittleDraw_GetModeBit(this.mode, 2);
  Vec3 origin = this.payload.multiplyVector3(Vec3()) + (local ? this.ctx : Vec3());
  LittleDraw_AddColoredPoint(origin, this.pointSize, this.color, points, vc, psizes);

  if (LittleDraw_GetModeBit(this.mode, 1))
    LittleDraw_AddColoredPoint(this.ctx, this.pointSize, this.color, points, vc, psizes);
}


//
// Create Geometry
//

function LitteDraw_createGeometry(io LittleDraw jobs[], io Points debugPoints, io Lines debugLines) {
  Ref<Lines> lines = debugLines;
  Ref<Points> points = debugPoints;
  Ref<ColorAttribute> linesVCAttr = lines.getAttributes().getOrCreateColorAttribute("vertexColors");
  Ref<ColorAttribute> pointsVCAttr = points.getAttributes().getOrCreateColorAttribute("vertexColors");
  Ref<ScalarAttribute> pointsSizesAttr = points.getOrCreateSizesAttribute();

  for (Size i=0; i<jobs.size(); i++) {
    Ref<LittleDraw> job = jobs[i];

    while (job != null) {
      switch (job.type()) {
        // switched out by type to hopefully give the inliner a chance
        case LittleDrawVector:
          Ref<LittleDrawVector>(job).createLines(lines, linesVCAttr);
          Ref<LittleDrawVector>(job).createPoints(points, pointsVCAttr, pointsSizesAttr);
          break;
        case LittleDrawAxis:
          Ref<LittleDrawAxis>(job).createLines(lines, linesVCAttr);
          Ref<LittleDrawAxis>(job).createPoints(points, pointsVCAttr, pointsSizesAttr);
          break;
        case LittleDrawColor:
          Ref<LittleDrawColor>(job).createLines(lines, linesVCAttr);
          Ref<LittleDrawColor>(job).createPoints(points, pointsVCAttr, pointsSizesAttr);
          break;
        case LittleDrawString:
          Ref<LittleDrawString>(job).createLines(lines, linesVCAttr);
          Ref<LittleDrawString>(job).createPoints(points, pointsVCAttr, pointsSizesAttr);
          break;
        case LittleDraw:
          break;
        default:
          job.createLines(lines, linesVCAttr);
          job.createPoints(points, pointsVCAttr, pointsSizesAttr);
          break;
      }
      job = job.other;
    }
  }  
}


//
// HELPERS
//


/// \internal
inline LittleDraw_AddColoredLine(Vec3 pos0, Vec3 pos1, Color color0, Color color1, 
                                 io Ref<Lines> lines, io Ref<ColorAttribute> vc) {
  lines.addLine(pos0, pos1);
  vc.values[vc.size()-2] = color0;
  vc.values[vc.size()-1] = color1;
}

/// \internal
inline LittleDraw_AddColoredPoint(Vec3 pos, Scalar size, Color color, 
                                  io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> psizes) {
  points.addPoint(pos);
  vc.values[vc.size()-1] = color;
  psizes.values[psizes.size()-1] = size/2;
}

inline Color Vec3.toColor(Boolean unit, Boolean normalize) {
  Vec3 value = this;
  if (unit && (!Math_badDivisor(value.x) || !Math_badDivisor(value.z) || !Math_badDivisor(value.y)))
    value = value.unit();

  if (normalize)  
    value = value * 0.5 + Vec3(0.5, 0.5, 0.5);

  return Color(value.x, value.y, value.z, 1.0);
}