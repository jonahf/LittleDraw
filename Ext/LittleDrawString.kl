//
//
// Text drawing based on maCText, kindly contributed by by Marc Albrecht
//
// These are bitmasks for pixels in columns. 
// Each character is an 8x8 grid. 
//
// For example [1, 2, 4, 8, 16, 0, 0, 255] would draw this:
// Columns:
// 01234567
//
// #      #
//  #     #
//   #    #
//    #   #
//     #  #
//        #
//        #
//        #
//


/// \internal
const UInt8 FONT_MASKS_SPACE[] = [0, 0, 0, 0, 0, 0, 0, 0];
/// \internal
const UInt8 FONT_MASKS_EXCL[]  = [0, 0, 0, 79, 79, 0, 0, 0];
/// \internal
const UInt8 FONT_MASKS_DOUBLEQUOTE[] = [0, 7, 7, 0, 0, 7, 7, 0]; 
/// \internal
const UInt8 FONT_MASKS_POUND[] = [20, 127, 127, 20, 20, 127, 127, 20];
/// \internal
const UInt8 FONT_MASKS_DOLLAR[] = [0, 36, 46, 107, 107, 58, 18, 0];
/// \internal
const UInt8 FONT_MASKS_PERCENT[] = [0, 99, 51, 24, 12, 102, 99, 0];
/// \internal
const UInt8 FONT_MASKS_AMPERSAND[] = [0, 50, 127, 77, 77, 119, 114, 80];
/// \internal
const UInt8 FONT_MASKS_SINGLEQUOTE[] = [0, 0, 0, 7, 7, 0, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_OPENPAREN[] = [0, 0, 28, 62, 99, 65, 0, 0];
/// \internal
const UInt8 FONT_MASKS_CLOSEPAREN[] = [0, 0, 65, 99, 62, 28, 0, 0];
/// \internal
const UInt8 FONT_MASKS_ASTERIX[] = [8, 42, 62, 28, 28, 62, 42, 8]; 
/// \internal
const UInt8 FONT_MASKS_PLUS[] = [0, 8, 8, 62, 62, 8, 8, 0]; 
/// \internal
const UInt8 FONT_MASKS_COMMA[] = [0, 0, 128, 224, 96, 0, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_MINUS[] = [0, 8, 8, 8, 8, 8, 8, 0]; 
/// \internal
const UInt8 FONT_MASKS_PERIOD[] = [0, 0, 0, 96, 96, 0, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_SLASH[] = [0, 64, 96, 48, 24, 12, 6, 2]; 
/// \internal
const UInt8 FONT_MASKS_0[] = [0, 62, 127, 73, 69, 127, 62, 0]; 
/// \internal
const UInt8 FONT_MASKS_1[] = [0, 64, 68, 127, 127, 64, 64, 0]; 
/// \internal
const UInt8 FONT_MASKS_2[] = [0, 98, 115, 81, 73, 79, 70, 0]; 
/// \internal
const UInt8 FONT_MASKS_3[] = [0, 34, 99, 73, 73, 127, 54, 0]; 
/// \internal
const UInt8 FONT_MASKS_4[] = [0, 24, 24, 20, 22, 127, 127, 16]; 
/// \internal
const UInt8 FONT_MASKS_5[] = [0, 39, 103, 69, 69, 125, 57, 0]; 
/// \internal
const UInt8 FONT_MASKS_6[] = [0, 62, 127, 73, 73, 123, 50, 0]; 
/// \internal
const UInt8 FONT_MASKS_7[] = [0, 3, 3, 121, 125, 7, 3, 0]; 
/// \internal
const UInt8 FONT_MASKS_8[] = [0, 54, 127, 73, 73, 127, 54, 0]; 
/// \internal
const UInt8 FONT_MASKS_9[] = [0, 38, 111, 73, 73, 127, 62, 0]; 
/// \internal
const UInt8 FONT_MASKS_COLON[] = [0, 0, 0, 36, 36, 0, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_SEMICOLON[] = [0, 0, 128, 228, 100, 0, 0, 0];  
/// \internal
const UInt8 FONT_MASKS_LT[] = [0, 8, 28, 54, 99, 65, 65, 0]; 
/// \internal
const UInt8 FONT_MASKS_EQ[] = [0, 20, 20, 20, 20, 20, 20, 0]; 
/// \internal
const UInt8 FONT_MASKS_GT[] = [0, 65, 65, 99, 54, 28, 8, 0]; 
/// \internal
const UInt8 FONT_MASKS_QUESTION[] = [0, 2, 3, 81, 89, 15, 6, 0]; 
/// \internal
const UInt8 FONT_MASKS_AT[] = [0, 62, 127, 65, 77, 79, 46, 0]; 
/// \internal
const UInt8 FONT_MASKS_A[] = [0, 124, 126, 11, 11, 126, 124, 0]; 
/// \internal
const UInt8 FONT_MASKS_B[] = [0, 127, 127, 73, 73, 127, 54, 0]; 
/// \internal
const UInt8 FONT_MASKS_C[] = [0, 62, 127, 65, 65, 99, 34, 0]; 
/// \internal
const UInt8 FONT_MASKS_D[] = [0, 127, 127, 65, 99, 62, 28, 0]; 
/// \internal
const UInt8 FONT_MASKS_E[] = [0, 127, 127, 73, 73, 65, 65, 0]; 
/// \internal
const UInt8 FONT_MASKS_F[] = [0, 127, 127, 9, 9, 1, 1, 0]; 
/// \internal
const UInt8 FONT_MASKS_G[] = [0, 62, 127, 65, 73, 123, 58, 0]; 
/// \internal
const UInt8 FONT_MASKS_H[] = [0, 127, 127, 8, 8, 127, 127, 0]; 
/// \internal
const UInt8 FONT_MASKS_I[] = [0, 0, 65, 127, 127, 65, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_J[] = [0, 32, 96, 65, 127, 63, 1, 0]; 
/// \internal
const UInt8 FONT_MASKS_K[] = [0, 127, 127, 28, 54, 99, 65, 0]; 
/// \internal
const UInt8 FONT_MASKS_L[] = [0, 127, 127, 64, 64, 64, 64, 0]; 
/// \internal
const UInt8 FONT_MASKS_M[] = [0, 127, 127, 6, 12, 6, 127, 127]; 
/// \internal
const UInt8 FONT_MASKS_N[] = [0, 127, 127, 14, 28, 127, 127, 0]; 
/// \internal
const UInt8 FONT_MASKS_O[] = [0, 62, 127, 65, 65, 127, 62, 0]; 
/// \internal
const UInt8 FONT_MASKS_P[] = [0, 127, 127, 9, 9, 15, 6, 0]; 
/// \internal
const UInt8 FONT_MASKS_Q[] = [0, 30, 63, 33, 97, 127, 94, 0]; 
/// \internal
const UInt8 FONT_MASKS_R[] = [0, 127, 127, 25, 57, 111, 70, 0]; 
/// \internal
const UInt8 FONT_MASKS_S[] = [0, 38, 111, 73, 73, 123, 50, 0]; 
/// \internal
const UInt8 FONT_MASKS_T[] = [0, 1, 1, 127, 127, 1, 1, 0]; 
/// \internal
const UInt8 FONT_MASKS_U[] = [0, 63, 127, 64, 64, 127, 63, 0]; 
/// \internal
const UInt8 FONT_MASKS_V[] = [0, 31, 63, 96, 96, 63, 31, 0]; 
/// \internal
const UInt8 FONT_MASKS_W[] = [0, 127, 127, 48, 24, 48, 127, 127]; 
/// \internal
const UInt8 FONT_MASKS_X[] = [0, 99, 119, 28, 28, 119, 99, 0]; 
/// \internal
const UInt8 FONT_MASKS_Y[] = [0, 7, 15, 120, 120, 15, 7, 0]; 
/// \internal
const UInt8 FONT_MASKS_Z[] = [0, 97, 113, 89, 77, 71, 67, 0]; 
/// \internal
const UInt8 FONT_MASKS_OPENSQRBRACE[] = [0, 0, 127, 127, 65, 65, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_BACKSLASH[] = [0, 2, 6, 12, 24, 48, 96, 64];  
/// \internal
const UInt8 FONT_MASKS_CLOSESQRBRACE[] = [0, 0, 65, 65, 127, 127, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_POWER[] = [0, 4, 6, 3, 3, 6, 4, 0]; 
/// \internal
const UInt8 FONT_MASKS_UNDERSCORE[] = [0, 128, 128, 128, 128, 128, 128, 128]; 
/// \internal
const UInt8 FONT_MASKS_TICK[] = [0, 0, 0, 1, 3, 6, 4, 0]; 
/// \internal
const UInt8 FONT_MASKS_a[] = [0, 32, 116, 84, 84, 124, 120, 0]; 
/// \internal
const UInt8 FONT_MASKS_b[] = [0, 126, 126, 72, 72, 120, 48, 0]; 
/// \internal
const UInt8 FONT_MASKS_c[] = [0, 56, 124, 68, 68, 68, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_d[] = [0, 48, 120, 72, 72, 126, 126, 0]; 
/// \internal
const UInt8 FONT_MASKS_e[] = [0, 56, 124, 84, 84, 92, 24, 0]; 
/// \internal
const UInt8 FONT_MASKS_f[] = [0, 0, 8, 124, 126, 10, 10, 0]; 
/// \internal
const UInt8 FONT_MASKS_g[] = [0, 152, 188, 164, 164, 252, 124, 0]; 
/// \internal
const UInt8 FONT_MASKS_h[] = [0, 126, 126, 8, 8, 120, 112, 0]; 
/// \internal
const UInt8 FONT_MASKS_i[] = [0, 0, 72, 122, 122, 64, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_j[] = [0, 0, 128, 128, 128, 250, 122, 0]; 
/// \internal
const UInt8 FONT_MASKS_k[] = [0, 126, 126, 16, 56, 104, 64, 0]; 
/// \internal
const UInt8 FONT_MASKS_l[] = [0, 0, 66, 126, 126, 64, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_m[] = [0, 124, 124, 24, 56, 28, 124, 120]; 
/// \internal
const UInt8 FONT_MASKS_n[] = [0, 124, 124, 4, 4, 124, 120, 0]; 
/// \internal
const UInt8 FONT_MASKS_o[] = [0, 56, 124, 68, 68, 124, 56, 0]; 
/// \internal
const UInt8 FONT_MASKS_p[] = [0, 252, 252, 36, 36, 60, 24, 0]; 
/// \internal
const UInt8 FONT_MASKS_q[] = [0, 24, 60, 36, 36, 252, 252, 0]; 
/// \internal
const UInt8 FONT_MASKS_r[] = [0, 124, 124, 4, 4, 12, 8, 0]; 
/// \internal
const UInt8 FONT_MASKS_s[] = [0, 72, 92, 84, 84, 116, 36, 0]; 
/// \internal
const UInt8 FONT_MASKS_t[] = [0, 4, 4, 62, 126, 68, 68, 0]; 
/// \internal
const UInt8 FONT_MASKS_u[] = [0, 60, 124, 64, 64, 124, 124, 0]; 
/// \internal
const UInt8 FONT_MASKS_v[] = [0, 28, 60, 96, 96, 60, 28, 0]; 
/// \internal
const UInt8 FONT_MASKS_w[] = [0, 28, 124, 112, 56, 112, 124, 28]; 
/// \internal
const UInt8 FONT_MASKS_x[] = [0, 68, 108, 56, 56, 108, 68, 0]; 
/// \internal
const UInt8 FONT_MASKS_y[] = [0, 156, 188, 160, 224, 124, 60, 0]; 
/// \internal
const UInt8 FONT_MASKS_z[] = [0, 68, 100, 116, 92, 76, 68, 0]; 
/// \internal
const UInt8 FONT_MASKS_CURLYBRACEOPEN[] = [0, 0, 8, 62, 119, 65, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_PIPE[] = [0, 0, 0, 127, 127, 0, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_CURLYBRACECLOSE[] = [0, 0, 65, 119, 62, 8, 0, 0]; 
/// \internal
const UInt8 FONT_MASKS_TILDE[] = [0, 8, 4, 12, 24, 1, 8, 0];  


function UInt8[String][8] getCharMaskDict() {
  UInt8 dictionary[String][8];
  dictionary[' ' ] = FONT_MASKS_SPACE; 
  dictionary['!' ] = FONT_MASKS_EXCL; 
  dictionary['"' ] = FONT_MASKS_DOUBLEQUOTE; 
  dictionary['#' ] = FONT_MASKS_POUND; 
  dictionary['$' ] = FONT_MASKS_DOLLAR; 
  dictionary['%' ] = FONT_MASKS_PERCENT; 
  dictionary['&' ] = FONT_MASKS_AMPERSAND; 
  dictionary["'" ] = FONT_MASKS_SINGLEQUOTE;
  dictionary['(' ] = FONT_MASKS_OPENPAREN; 
  dictionary[')' ] = FONT_MASKS_CLOSEPAREN; 
  dictionary['*' ] = FONT_MASKS_ASTERIX; 
  dictionary['+' ] = FONT_MASKS_PLUS; 
  dictionary[',' ] = FONT_MASKS_COMMA; 
  dictionary['-' ] = FONT_MASKS_MINUS; 
  dictionary['.' ] = FONT_MASKS_PERIOD; 
  dictionary['/' ] = FONT_MASKS_SLASH; 
  dictionary['0' ] = FONT_MASKS_0; 
  dictionary['1' ] = FONT_MASKS_1; 
  dictionary['2' ] = FONT_MASKS_2; 
  dictionary['3' ] = FONT_MASKS_3; 
  dictionary['4' ] = FONT_MASKS_4; 
  dictionary['5' ] = FONT_MASKS_5; 
  dictionary['6' ] = FONT_MASKS_6; 
  dictionary['7' ] = FONT_MASKS_7; 
  dictionary['8' ] = FONT_MASKS_8; 
  dictionary['9' ] = FONT_MASKS_9; 
  dictionary[':' ] = FONT_MASKS_COLON; 
  dictionary[';' ] = FONT_MASKS_SEMICOLON; 
  dictionary['<' ] = FONT_MASKS_LT; 
  dictionary['=' ] = FONT_MASKS_EQ; 
  dictionary['>' ] = FONT_MASKS_GT; 
  dictionary['?' ] = FONT_MASKS_QUESTION; 
  dictionary['@' ] = FONT_MASKS_AT; 
  dictionary['A' ] = FONT_MASKS_A; 
  dictionary['B' ] = FONT_MASKS_B; 
  dictionary['C' ] = FONT_MASKS_C; 
  dictionary['D' ] = FONT_MASKS_D; 
  dictionary['E' ] = FONT_MASKS_E; 
  dictionary['F' ] = FONT_MASKS_F; 
  dictionary['G' ] = FONT_MASKS_G; 
  dictionary['H' ] = FONT_MASKS_H; 
  dictionary['I' ] = FONT_MASKS_I; 
  dictionary['J' ] = FONT_MASKS_J; 
  dictionary['K' ] = FONT_MASKS_K; 
  dictionary['L' ] = FONT_MASKS_L; 
  dictionary['M' ] = FONT_MASKS_M; 
  dictionary['N' ] = FONT_MASKS_N; 
  dictionary['O' ] = FONT_MASKS_O; 
  dictionary['P' ] = FONT_MASKS_P; 
  dictionary['Q' ] = FONT_MASKS_Q; 
  dictionary['R' ] = FONT_MASKS_R; 
  dictionary['S' ] = FONT_MASKS_S; 
  dictionary['T' ] = FONT_MASKS_T; 
  dictionary['U' ] = FONT_MASKS_U; 
  dictionary['V' ] = FONT_MASKS_V; 
  dictionary['W' ] = FONT_MASKS_W; 
  dictionary['X' ] = FONT_MASKS_X; 
  dictionary['Y' ] = FONT_MASKS_Y; 
  dictionary['Z' ] = FONT_MASKS_Z; 
  dictionary['[' ] = FONT_MASKS_OPENSQRBRACE; 
  dictionary['\\'] = FONT_MASKS_BACKSLASH; 
  dictionary[']' ] = FONT_MASKS_CLOSESQRBRACE; 
  dictionary['^' ] = FONT_MASKS_POWER; 
  dictionary['_' ] = FONT_MASKS_UNDERSCORE; 
  dictionary['`' ] = FONT_MASKS_TICK; 
  dictionary['a' ] = FONT_MASKS_a; 
  dictionary['b' ] = FONT_MASKS_b; 
  dictionary['c' ] = FONT_MASKS_c; 
  dictionary['d' ] = FONT_MASKS_d; 
  dictionary['e' ] = FONT_MASKS_e; 
  dictionary['f' ] = FONT_MASKS_f; 
  dictionary['g' ] = FONT_MASKS_g; 
  dictionary['h' ] = FONT_MASKS_h; 
  dictionary['i' ] = FONT_MASKS_i; 
  dictionary['j' ] = FONT_MASKS_j; 
  dictionary['k' ] = FONT_MASKS_k; 
  dictionary['l' ] = FONT_MASKS_l; 
  dictionary['m' ] = FONT_MASKS_m; 
  dictionary['n' ] = FONT_MASKS_n; 
  dictionary['o' ] = FONT_MASKS_o; 
  dictionary['p' ] = FONT_MASKS_p; 
  dictionary['q' ] = FONT_MASKS_q; 
  dictionary['r' ] = FONT_MASKS_r; 
  dictionary['s' ] = FONT_MASKS_s; 
  dictionary['t' ] = FONT_MASKS_t; 
  dictionary['u' ] = FONT_MASKS_u; 
  dictionary['v' ] = FONT_MASKS_v; 
  dictionary['w' ] = FONT_MASKS_w; 
  dictionary['x' ] = FONT_MASKS_x; 
  dictionary['y' ] = FONT_MASKS_y; 
  dictionary['z' ] = FONT_MASKS_z; 
  dictionary['{' ] = FONT_MASKS_CURLYBRACEOPEN; 
  dictionary['|' ] = FONT_MASKS_PIPE; 
  dictionary['}' ] = FONT_MASKS_CURLYBRACECLOSE; 
  dictionary['~' ] = FONT_MASKS_TILDE; 
  return dictionary;
}

function UInt8[8] getCharMask(String character) {
  switch (character) {
    case '{' : return FONT_MASKS_CURLYBRACEOPEN; 
    case '}' : return FONT_MASKS_CURLYBRACECLOSE; 
    case '0' : return FONT_MASKS_0; 
    case '1' : return FONT_MASKS_1; 
    case '2' : return FONT_MASKS_2; 
    case '3' : return FONT_MASKS_3; 
    case '4' : return FONT_MASKS_4; 
    case '5' : return FONT_MASKS_5; 
    case '6' : return FONT_MASKS_6; 
    case '7' : return FONT_MASKS_7; 
    case '8' : return FONT_MASKS_8; 
    case '9' : return FONT_MASKS_9; 
    case ' ' : return FONT_MASKS_SPACE; 
    case '!' : return FONT_MASKS_EXCL; 
    case '"' : return FONT_MASKS_DOUBLEQUOTE; 
    case '#' : return FONT_MASKS_POUND; 
    case '$' : return FONT_MASKS_DOLLAR; 
    case '%' : return FONT_MASKS_PERCENT; 
    case '&' : return FONT_MASKS_AMPERSAND; 
    case "'" : return FONT_MASKS_SINGLEQUOTE;
    case '(' : return FONT_MASKS_OPENPAREN; 
    case ')' : return FONT_MASKS_CLOSEPAREN; 
    case '*' : return FONT_MASKS_ASTERIX; 
    case '+' : return FONT_MASKS_PLUS; 
    case ',' : return FONT_MASKS_COMMA; 
    case '-' : return FONT_MASKS_MINUS; 
    case '.' : return FONT_MASKS_PERIOD; 
    case '/' : return FONT_MASKS_SLASH; 
    case ':' : return FONT_MASKS_COLON; 
    case ';' : return FONT_MASKS_SEMICOLON; 
    case '<' : return FONT_MASKS_LT; 
    case '=' : return FONT_MASKS_EQ; 
    case '>' : return FONT_MASKS_GT; 
    case '?' : return FONT_MASKS_QUESTION; 
    case '@' : return FONT_MASKS_AT; 
    case 'A' : return FONT_MASKS_A; 
    case 'B' : return FONT_MASKS_B; 
    case 'C' : return FONT_MASKS_C; 
    case 'D' : return FONT_MASKS_D; 
    case 'E' : return FONT_MASKS_E; 
    case 'F' : return FONT_MASKS_F; 
    case 'G' : return FONT_MASKS_G; 
    case 'H' : return FONT_MASKS_H; 
    case 'I' : return FONT_MASKS_I; 
    case 'J' : return FONT_MASKS_J; 
    case 'K' : return FONT_MASKS_K; 
    case 'L' : return FONT_MASKS_L; 
    case 'M' : return FONT_MASKS_M; 
    case 'N' : return FONT_MASKS_N; 
    case 'O' : return FONT_MASKS_O; 
    case 'P' : return FONT_MASKS_P; 
    case 'Q' : return FONT_MASKS_Q; 
    case 'R' : return FONT_MASKS_R; 
    case 'S' : return FONT_MASKS_S; 
    case 'T' : return FONT_MASKS_T; 
    case 'U' : return FONT_MASKS_U; 
    case 'V' : return FONT_MASKS_V; 
    case 'W' : return FONT_MASKS_W; 
    case 'X' : return FONT_MASKS_X; 
    case 'Y' : return FONT_MASKS_Y; 
    case 'Z' : return FONT_MASKS_Z; 
    case '[' : return FONT_MASKS_OPENSQRBRACE; 
    case '\\': return FONT_MASKS_BACKSLASH; 
    case ']' : return FONT_MASKS_CLOSESQRBRACE; 
    case '^' : return FONT_MASKS_POWER; 
    case '_' : return FONT_MASKS_UNDERSCORE; 
    case '`' : return FONT_MASKS_TICK; 
    case 'a' : return FONT_MASKS_a; 
    case 'b' : return FONT_MASKS_b; 
    case 'c' : return FONT_MASKS_c; 
    case 'd' : return FONT_MASKS_d; 
    case 'e' : return FONT_MASKS_e; 
    case 'f' : return FONT_MASKS_f; 
    case 'g' : return FONT_MASKS_g; 
    case 'h' : return FONT_MASKS_h; 
    case 'i' : return FONT_MASKS_i; 
    case 'j' : return FONT_MASKS_j; 
    case 'k' : return FONT_MASKS_k; 
    case 'l' : return FONT_MASKS_l; 
    case 'm' : return FONT_MASKS_m; 
    case 'n' : return FONT_MASKS_n; 
    case 'o' : return FONT_MASKS_o; 
    case 'p' : return FONT_MASKS_p; 
    case 'q' : return FONT_MASKS_q; 
    case 'r' : return FONT_MASKS_r; 
    case 's' : return FONT_MASKS_s; 
    case 't' : return FONT_MASKS_t; 
    case 'u' : return FONT_MASKS_u; 
    case 'v' : return FONT_MASKS_v; 
    case 'w' : return FONT_MASKS_w; 
    case 'x' : return FONT_MASKS_x; 
    case 'y' : return FONT_MASKS_y; 
    case 'z' : return FONT_MASKS_z; 
    case '|' : return FONT_MASKS_PIPE; 
    case '~' : return FONT_MASKS_TILDE;
  }

  return FONT_MASKS_SPACE;
}

/// \internal
inline Boolean font_pixel_on(UInt8[8] character, UInt8 col, UInt8 row) {
  return character[ col ] & (UInt8(1) << row);
}


/// \dfgPresetOmit
const UInt8 LD_MODE_STR_DOTS_OFFSET = 0;
/// \dfgPresetOmit
const UInt8 LD_MODE_STR = 1;

object LittleDrawString : LittleDraw {
  String payload;
  Xfo xfo;
  Color color;
  // UInt8 mode;
  UInt8 modeMask;
  UInt8 pointSize;
};


// Text drawing based on maCText, kindly contributed by by Marc Albrecht
/// \dfgPresetTitle LittleDrawString
/// \dfgPresetCombo mode ("Hash lines", "Dots with trail")
/// \dfgPresetDefault mode 0
/// \dfgPresetDefault trail true
/// \dfgPresetDefault translationRelative true
/// \dfgPresetDefault drawContextPoint true
/// \dfgPresetDefault scale 0.1
/// \dfgPresetDefault color {'r':1.0, 'g':1.0, 'b':1.0, 'a':1.0}
function LittleDrawString(UInt8 mode, Boolean trail, Boolean translationRelative, Boolean drawContextPoint, 
                          String payload, Vec3 translate, Quat ori, Scalar scale, Color color, UInt8 pointSize, 
                          LittleDraw other) {
  this.payload = payload;
  this.xfo = Xfo(translate, ori, Vec3(scale, scale, scale)/100);
  this.color = color;
  // this.mode = mode;
  this.pointSize = pointSize;
  this.other = other;

  this.setTextAsDotsFlag(mode == 1);
  this.setTrailFlag(trail);
  this.setRelativeFlag(translationRelative);
  this.setContextPointFlag(drawContextPoint);
}

private inline Boolean LittleDrawString.getModeBit(UInt8 bit) {
  return this.modeMask & (1 << bit);
}
private inline LittleDrawString.setModeBit!(UInt8 bit, Boolean value) {
  this.modeMask = this.modeMask & ~(1 << bit);
  if (value)
    this.modeMask = this.modeMask | (1 << bit);
}

private inline Boolean LittleDrawString.getTextAsDotsFlag() {
  return this.getModeBit(0);
}
private inline LittleDrawString.setTextAsDotsFlag!(Boolean value) {
  this.setModeBit(0, value);
}

private inline Boolean LittleDrawString.getTrailFlag() {
  return this.getModeBit(1);
}
private inline LittleDrawString.setTrailFlag!(Boolean value) {
  this.setModeBit(1, value);
}

private inline Boolean LittleDrawString.getRelativeFlag() {
  return this.getModeBit(2);
}
private inline LittleDrawString.setRelativeFlag!(Boolean value) {
  this.setModeBit(2, value);
}

private inline Boolean LittleDrawString.getContextPointFlag() {
  return this.getModeBit(3);
}
private inline LittleDrawString.setContextPointFlag!(Boolean value) {
  this.setModeBit(3, value);
}



/// \dfgPresetOmit
function LittleDrawString.createPoints(io Ref<Points> points, io Ref<ColorAttribute> vc, io Ref<ScalarAttribute> psizes) {
  if (this.getContextPointFlag())
    LittleDraw_AddColoredPoint(this.ctx, this.pointSize, this.color, points, vc, psizes);

  if (!this.getTextAsDotsFlag())
    return;

  Size new, new_it, count = points.pointCount();

  for (Size i=0; i<this.payload.length(); i++) { 
    UInt8 char_mask[8] = getCharMask(this.payload[i]);
    for (UInt8 row=0; row<8; row++) {
      for (UInt8 col=0; col<8; col++) {
        if (font_pixel_on(char_mask, col, row))
          new++;
      }
    }
    // break;
  }
  points.resize(count + new);
  Vec3 offset = this.getRelativeFlag() ? this.ctx : Vec3();
  Vec3Attribute positions = points.getAttributes().positionsAttribute;
  for (Size i=0; i<this.payload.length(); i++) { 
    UInt8 char_mask[8] = getCharMask(this.payload[i]);
    for (UInt8 row=0; row<8; row++) {
      for (UInt8 col=0; col<8; col++) {
        if (font_pixel_on(char_mask, col, row)) {
          // Vec3 ppos = Vec3(col + i*8, -Scalar(row) + 8, 0);
          Vec3 ppos = this.getPos(i, row, col);
          positions.values[count + new_it] = this.xfo.transformVector(ppos) + offset;
          vc.values[count + new_it] = this.color;
          psizes.values[count + new_it] = this.pointSize * 0.5;
          new_it++;
        }
      }
    }
  }
}

inline private Vec3 LittleDrawString.getPos(Size index, UInt8 row, UInt8 column) {
  return Vec3(column + index*8, -Scalar(row) + 8, 0);
}

/// \dfgPresetOmit
function LittleDrawString.createLines(io Ref<Lines> lines, io Ref<ColorAttribute> vc) {
  Vec3 offset = this.getRelativeFlag() ? this.ctx : Vec3();

  if (this.getTrailFlag())
    LittleDraw_addColoredLine(this.ctx, this.xfo.tr + offset, this.color*0.5, this.color*0.75, lines, vc);

  if (!this.getTextAsDotsFlag()) {    
    UInt8 line_start = 0;
    Boolean last_pixel_on = false;

    for (Size i=0; i<this.payload.length(); i++) {
      UInt8 char_mask[8] = getCharMask(this.payload[i]);
      // do row line segments
      for (UInt8 row=0; row<8; row++) {
        for (UInt8 col=0; col<8; col++) {
          Boolean pixel_on = font_pixel_on(char_mask, col, row);

          Boolean at_end = col == 7;
          Boolean last_was_single = last_pixel_on && (line_start == col - 1);
          if (last_pixel_on && (!pixel_on || at_end) && !last_was_single ) {
            Vec3 start = this.getPos(i, row, line_start);
            Vec3 end = this.getPos(i, row, col - (pixel_on ? 0 : 1));
            LittleDraw_addColoredLine(this.xfo.transformVector(start) + offset, 
              this.xfo.transformVector(end) + offset, this.color, this.color, lines, vc);
          }
          if (!last_pixel_on && pixel_on)
            line_start = col;
          last_pixel_on = pixel_on;
        }
        last_pixel_on = false;
      }
      // do column line segments
      for (UInt8 col=0; col<8; col++) {
        for (UInt8 row=0; row<8; row++) {
          Boolean pixel_on = font_pixel_on(char_mask, col, row);

          Boolean at_end = row == 7;
          Boolean last_was_single = last_pixel_on && (line_start == row - 1);
          if (last_pixel_on && (!pixel_on || at_end) && !last_was_single ) {
            Vec3 start = this.getPos(i, line_start, col);
            Vec3 end =   this.getPos(i, row - (pixel_on ? 0 : 1), col);
            LittleDraw_addColoredLine(this.xfo.transformVector(start) + offset, 
              this.xfo.transformVector(end) + offset, this.color, this.color, lines, vc);
          }
          if (!last_pixel_on && pixel_on)
            line_start = row;
          last_pixel_on = pixel_on;
        }
        last_pixel_on = false;
      }


    }
  }
}


